head	1.5;
access;
symbols
	yamt-nfs-mp-base3:1.4
	jym-xensuspend:1.4.0.2
	jym-xensuspend-base:1.5
	jym-xensuspend-nbase:1.5
	jymxensuspend-base:1.5
	matt-premerge-20091211:1.5
	rmind-uvmplock-base:1.5
	yamt-nfs-mp-base4:1.5
	yamt-nfs-mp-base5:1.5
	yamt-nfs-mp-base6:1.5
	yamt-nfs-mp-base7:1.5
	yamt-nfs-mp-base8:1.5
	yamt-nfs-mp-base9:1.5;
locks; strict;
comment	@# @;
expand	@b@;


1.5
date	2009.05.13.02.50.31;	author pgoyette;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.18.12.05.49;	author lukem;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2009.01.14.21.33.22;	author pooka;	state Exp;
branches;
next	1.2;

1.2
date	2008.12.17.16.02.27;	author christos;	state Exp;
branches;
next	1.1;

1.1
date	2008.12.16.22.33.11;	author christos;	state Exp;
branches;
next	;

1.4.2.1
date	2009.05.13.17.23.18;	author jym;	state Exp;
branches;
next	;


desc
@@


1.5
log
@
Implement snprintb_m(3) to provide multi-line bit/bit-field decode.
Discussed on tech-kern.
@
text
@/*	$NetBSD: snprintb.c,v 1.5 2009/05/13 02:50:31 pgoyette Exp $	*/

/*-
 * Copyright (c) 2002 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * snprintb: print an interpreted bitmask to a buffer
 *
 * => returns the length of the buffer that would be required to print the
 *    string minus the terminating NUL.
 */
#ifndef _STANDALONE
# ifndef _KERNEL

#  if HAVE_NBTOOL_CONFIG_H
#   include "nbtool_config.h"
#  endif

#  include <sys/cdefs.h>
#  if defined(LIBC_SCCS) && !defined(lint)
__RCSID("$NetBSD: snprintb.c,v 1.5 2009/05/13 02:50:31 pgoyette Exp $");
#  endif

#  include <sys/types.h>
#  include <sys/inttypes.h>
#  include <stdio.h>
#  include <util.h>
#  include <errno.h>
# else
#  include <sys/cdefs.h>
__KERNEL_RCSID(0, "$NetBSD: snprintb.c,v 1.5 2009/05/13 02:50:31 pgoyette Exp $");
#  include <sys/param.h>
#  include <sys/inttypes.h>
#  include <sys/systm.h>
#  include <lib/libkern/libkern.h>
# endif

int
snprintb_m(char *buf, size_t buflen, const char *bitfmt, uint64_t val,
	   size_t l_max)
{
	char *bp = buf, *s_bp = NULL;
	const char *c_fmt, *s_fmt = NULL, *cur_fmt;
	const char *sbase;
	int bit, ch, t_len, s_len = 0, l_len, f_len, v_len, sep;
	int restart = 0;
	uint64_t field;

#ifdef _KERNEL
	/*
	 * For safety; no other *s*printf() do this, but in the kernel
	 * we don't usually check the return value
	 */
	(void)memset(buf, 0, buflen);
#endif /* _KERNEL */

	ch = *bitfmt++;
	switch (ch != '\177' ? ch : *bitfmt++) {
	case 8:
		sbase = "0%" PRIo64;
		break;
	case 10:
		sbase = "%" PRId64;
		break;
	case 16:
		sbase = "0x%" PRIx64;
		break;
	default:
		goto internal;
	}

	/* Reserve space for trailing blank line if needed */
	if (l_max > 0)
		buflen--;

	t_len = snprintf(bp, buflen, sbase, val);
	if (t_len < 0)
		goto internal;

	v_len = l_len = t_len;

	if ((size_t)t_len < buflen)
		bp += t_len;
	else
		bp += buflen - 1;

	/*
	 * If the value we printed was 0 and we're using the old-style format,
	 * we're done.
	 */
	if ((val == 0) && (ch != '\177'))
		goto terminate;

#define STORE(c) { l_len++;						\
		   if ((size_t)(++t_len) < buflen)			\
		   	*bp++ = (c);					\
		 } while ( /* CONSTCOND */ 0)

#define	BACKUP	{ if (s_bp != NULL) {					\
			bp = s_bp; s_bp = NULL;				\
			t_len -= l_len - s_len;				\
			restart = 1;					\
			bitfmt = s_fmt;					\
		  }							\
		  STORE('>'); STORE('\0');				\
		  if ((size_t)t_len < buflen)				\
			snprintf(bp, buflen - t_len, sbase, val);	\
		  t_len += v_len; l_len = v_len; bp += v_len;		\
		} while ( /* CONSTCOND */ 0)

#define	PUTSEP								\
		if (l_max > 0 && (size_t)l_len >= l_max) {		\
			BACKUP;						\
			STORE('<');					\
		} else {						\
			/* Remember separator location */		\
			if ( l_max > 0 && sep != '<') {			\
				s_len = l_len;				\
				s_bp  = bp;				\
				s_fmt = cur_fmt;			\
			}						\
			STORE(sep);					\
			restart = 0;					\
		}							\

#define	PUTCHR(c)							\
		if (l_max > 0 && (size_t)l_len >= (l_max - 1)) {	\
			BACKUP;						\
			if (restart == 0) {				\
				STORE(c);				\
			} else						\
				sep = '<';				\
		} else {						\
			STORE(c);					\
			restart = 0;					\
		}							\

#define PUTS(s) while ((ch = *(s)++) != 0) {				\
			PUTCHR(ch);					\
			if (restart)					\
				break;					\
		}

	/*
	 * Chris Torek's new bitmask format is identified by a leading \177
	 */
	sep = '<';
	if (ch != '\177') {
		/* old (standard) format. */
		for (;(bit = *bitfmt) != 0;) {
			cur_fmt = bitfmt++;
			if (val & (1 << (bit - 1))) {
				PUTSEP;
				if (restart)
					continue;
				sep = ',';
				for (; (ch = *bitfmt) > ' '; ++bitfmt) {
					PUTCHR(ch); 
					if (restart)
						break;
				}
			} else
				for (; *bitfmt > ' '; ++bitfmt)
					continue;
		}
	} else {
		/* new quad-capable format; also does fields. */
		field = val;
		while (c_fmt = bitfmt, (ch = *bitfmt++) != '\0') {
			bit = *bitfmt++;	/* now 0-origin */
			switch (ch) {
			case 'b':
				if (((u_int)(val >> bit) & 1) == 0)
					goto skip;
				cur_fmt = c_fmt;
				PUTSEP;
				if (restart)
					break;
				PUTS(bitfmt);
				if (restart == 0)
					sep = ',';
				break;
			case 'f':
			case 'F':
				cur_fmt = c_fmt;
				f_len = *bitfmt++;	/* field length */
				field = (val >> bit) &
					    (((uint64_t)1 << f_len) - 1);
				if (ch == 'F')	/* just extract */
					break;
				PUTSEP;
				if (restart == 0) {
					sep = ',';
					PUTS(bitfmt);
				}
				if (restart == 0) {
					PUTCHR('=');
				}
				if (restart == 0) {
					f_len = snprintf(bp, buflen - t_len,
							 sbase, field);
					if (f_len < 0)
						goto internal;
					t_len += f_len;
					l_len += f_len;
					if ((size_t)t_len < buflen)
						bp += f_len;
					if (l_max > 0 &&
					    (size_t)l_len > l_max) {
						PUTCHR('#');
					}
				}
				break;
			case '=':
			case ':':
				/*
				 * Here "bit" is actually a value instead,
				 * to be compared against the last field.
				 * This only works for values in [0..255],
				 * of course.
				 */
				if ((int)field != bit)
					goto skip;
				if (ch == '=') {
					PUTCHR('=');
				}
				PUTS(bitfmt);
				break;
			default:
			skip:
				while (*bitfmt++ != '\0')
					continue;
				break;
			}
		}
	}
	l_len++;
	if ((size_t)(++t_len) < buflen)
		*bp++ = '>';
terminate:
	*bp++ = '\0';
	if (l_max != 0) {
		t_len++;
		*bp = '\0';
	}
	return t_len;
internal:
#ifndef _KERNEL
	errno = EINVAL;
#endif
	return -1;
}

int
snprintb(char *buf, size_t buflen, const char *bitfmt, uint64_t val)
{
	return snprintb_m(buf, buflen, bitfmt, val, 0);
}
#endif
@


1.4
log
@
fix -Wsign-compare issues
@
text
@d1 1
a1 1
/*	$NetBSD: snprintb.c,v 1.4 2009/01/18 12:05:49 lukem Exp $	*/
d44 1
a44 1
__RCSID("$NetBSD: snprintb.c,v 1.4 2009/01/18 12:05:49 lukem Exp $");
d54 1
a54 1
__KERNEL_RCSID(0, "$NetBSD: snprintb.c,v 1.4 2009/01/18 12:05:49 lukem Exp $");
d62 2
a63 1
snprintb(char *buf, size_t buflen, const char *bitfmt, uint64_t val)
d65 2
a66 1
	char *bp = buf;
d68 2
a69 1
	int bit, ch, len, sep, flen;
d95 6
a100 2
	len = snprintf(bp, buflen, sbase, val);
	if (len < 0)
d103 4
a106 2
	if ((size_t)len < buflen)
		bp += len;
d117 49
a165 2
#define PUTC(c) if ((size_t)(++len) < buflen) *bp++ = (c)
#define PUTS(s) while ((ch = *(s)++) != 0) PUTC(ch)
d173 2
a174 1
		for (;(bit = *bitfmt++) != 0;) {
d176 3
a178 3
				PUTC(sep);
				for (; (ch = *bitfmt) > ' '; ++bitfmt)
					PUTC(ch);
d180 5
d192 1
a192 1
		while ((ch = *bitfmt++) != '\0') {
d198 4
a201 1
				PUTC(sep);
d203 2
a204 1
				sep = ',';
d208 2
a209 1
				flen = *bitfmt++;	/* field length */
d211 1
a211 1
					    (((uint64_t)1 << flen) - 1);
d214 22
a235 10
				PUTC(sep);
				sep = ',';
				PUTS(bitfmt);
				PUTC('=');
				flen = snprintf(bp, buflen - len, sbase, field);
				if (flen < 0)
					goto internal;
				len += flen;
				if ((size_t)len < buflen)
					bp += flen;
d248 1
a248 1
					PUTC('=');
d260 8
a267 2
	if (sep != '<') {
		PUTC('>');
d269 1
a269 3
terminate:
	*bp = '\0';
	return len;
d276 6
@


1.3
log
@
Include sys/param.h in the kernel to make the vax properly pick up
memset.  Otherwise vax/macros.h doesn't get included and the usual
lossage ensues.
(I bet you saw that one coming)
@
text
@d1 1
a1 1
/*	$NetBSD: snprintb.c,v 1.3 2009/01/14 21:33:22 pooka Exp $	*/
d44 1
a44 1
__RCSID("$NetBSD: snprintb.c,v 1.3 2009/01/14 21:33:22 pooka Exp $");
d54 1
a54 1
__KERNEL_RCSID(0, "$NetBSD: snprintb.c,v 1.3 2009/01/14 21:33:22 pooka Exp $");
d96 1
a96 1
	if (len < buflen)
d108 1
a108 1
#define PUTC(c) if (++len < buflen) *bp++ = (c)
d155 1
a155 1
				if (len < buflen)
@


1.2
log
@
We don't need this for _STANDALONE, and it needs snprintf to work.
@
text
@d1 1
a1 1
/*	$NetBSD: snprintb.c,v 1.2 2008/12/17 16:02:27 christos Exp $	*/
d44 1
a44 1
__RCSID("$NetBSD: snprintb.c,v 1.2 2008/12/17 16:02:27 christos Exp $");
d54 2
a55 2
__KERNEL_RCSID(0, "$NetBSD: snprintb.c,v 1.2 2008/12/17 16:02:27 christos Exp $");
#  include <sys/types.h>
@


1.1
log
@
share with kernel; replaces bitmask_snprintf which was very broken:
- subtracted one from len without checking if len was 0
- checked for a minimum buffer size
- arguments order was inconsistent with other printf like functions
- no way to tell if it overflowed
@
text
@d1 1
a1 1
/*	$NetBSD: snprintb.c,v 1.1 2008/12/16 22:33:11 christos Exp $	*/
a28 11
#ifndef _KERNEL

# if HAVE_NBTOOL_CONFIG_H
#  include "nbtool_config.h"
# endif

# include <sys/cdefs.h>
# if defined(LIBC_SCCS) && !defined(lint)
__RCSID("$NetBSD: snprintb.c,v 1.1 2008/12/16 22:33:11 christos Exp $");
# endif

d32 2
a33 1
 * => returns the length of the buffer that would require to print the string.
d35 2
d38 14
a51 5
# include <sys/types.h>
# include <sys/inttypes.h>
# include <stdio.h>
# include <util.h>
# include <errno.h>
d53 7
a59 7
# include <sys/cdefs.h>
__KERNEL_RCSID(0, "$NetBSD: snprintb.c,v 1.1 2008/12/16 22:33:11 christos Exp $");
# include <sys/types.h>
# include <sys/inttypes.h>
# include <sys/systm.h>
# include <lib/libkern/libkern.h>
#endif
d193 1
@


1.4.2.1
log
@
Sync with HEAD.

Commit is split, to avoid a "too many arguments" protocol error.
@
text
@d1 1
a1 1
/*	$NetBSD: snprintb.c,v 1.4.2.1 2009/05/13 17:23:18 jym Exp $	*/
d44 1
a44 1
__RCSID("$NetBSD: snprintb.c,v 1.4.2.1 2009/05/13 17:23:18 jym Exp $");
d54 1
a54 1
__KERNEL_RCSID(0, "$NetBSD: snprintb.c,v 1.4.2.1 2009/05/13 17:23:18 jym Exp $");
d62 1
a62 2
snprintb_m(char *buf, size_t buflen, const char *bitfmt, uint64_t val,
	   size_t l_max)
d64 1
a64 2
	char *bp = buf, *s_bp = NULL;
	const char *c_fmt, *s_fmt = NULL, *cur_fmt;
d66 1
a66 2
	int bit, ch, t_len, s_len = 0, l_len, f_len, v_len, sep;
	int restart = 0;
d92 2
a93 6
	/* Reserve space for trailing blank line if needed */
	if (l_max > 0)
		buflen--;

	t_len = snprintf(bp, buflen, sbase, val);
	if (t_len < 0)
d96 2
a97 4
	v_len = l_len = t_len;

	if ((size_t)t_len < buflen)
		bp += t_len;
d108 2
a109 49
#define STORE(c) { l_len++;						\
		   if ((size_t)(++t_len) < buflen)			\
		   	*bp++ = (c);					\
		 } while ( /* CONSTCOND */ 0)

#define	BACKUP	{ if (s_bp != NULL) {					\
			bp = s_bp; s_bp = NULL;				\
			t_len -= l_len - s_len;				\
			restart = 1;					\
			bitfmt = s_fmt;					\
		  }							\
		  STORE('>'); STORE('\0');				\
		  if ((size_t)t_len < buflen)				\
			snprintf(bp, buflen - t_len, sbase, val);	\
		  t_len += v_len; l_len = v_len; bp += v_len;		\
		} while ( /* CONSTCOND */ 0)

#define	PUTSEP								\
		if (l_max > 0 && (size_t)l_len >= l_max) {		\
			BACKUP;						\
			STORE('<');					\
		} else {						\
			/* Remember separator location */		\
			if ( l_max > 0 && sep != '<') {			\
				s_len = l_len;				\
				s_bp  = bp;				\
				s_fmt = cur_fmt;			\
			}						\
			STORE(sep);					\
			restart = 0;					\
		}							\

#define	PUTCHR(c)							\
		if (l_max > 0 && (size_t)l_len >= (l_max - 1)) {	\
			BACKUP;						\
			if (restart == 0) {				\
				STORE(c);				\
			} else						\
				sep = '<';				\
		} else {						\
			STORE(c);					\
			restart = 0;					\
		}							\

#define PUTS(s) while ((ch = *(s)++) != 0) {				\
			PUTCHR(ch);					\
			if (restart)					\
				break;					\
		}
d117 1
a117 2
		for (;(bit = *bitfmt) != 0;) {
			cur_fmt = bitfmt++;
d119 3
a121 3
				PUTSEP;
				if (restart)
					continue;
a122 5
				for (; (ch = *bitfmt) > ' '; ++bitfmt) {
					PUTCHR(ch); 
					if (restart)
						break;
				}
d130 1
a130 1
		while (c_fmt = bitfmt, (ch = *bitfmt++) != '\0') {
d136 1
a136 4
				cur_fmt = c_fmt;
				PUTSEP;
				if (restart)
					break;
d138 1
a138 2
				if (restart == 0)
					sep = ',';
d142 1
a142 2
				cur_fmt = c_fmt;
				f_len = *bitfmt++;	/* field length */
d144 1
a144 1
					    (((uint64_t)1 << f_len) - 1);
d147 10
a156 22
				PUTSEP;
				if (restart == 0) {
					sep = ',';
					PUTS(bitfmt);
				}
				if (restart == 0) {
					PUTCHR('=');
				}
				if (restart == 0) {
					f_len = snprintf(bp, buflen - t_len,
							 sbase, field);
					if (f_len < 0)
						goto internal;
					t_len += f_len;
					l_len += f_len;
					if ((size_t)t_len < buflen)
						bp += f_len;
					if (l_max > 0 &&
					    (size_t)l_len > l_max) {
						PUTCHR('#');
					}
				}
d169 1
a169 1
					PUTCHR('=');
d181 3
a183 3
	l_len++;
	if ((size_t)(++t_len) < buflen)
		*bp++ = '>';
d185 2
a186 6
	*bp++ = '\0';
	if (l_max != 0) {
		t_len++;
		*bp = '\0';
	}
	return t_len;
a192 6

int
snprintb(char *buf, size_t buflen, const char *bitfmt, uint64_t val)
{
	return snprintb_m(buf, buflen, bitfmt, val, 0);
}
@

